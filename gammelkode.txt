    {/* <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Ticket className="h-6 w-6" />
          Recent Tickets
        </CardTitle>
        <CardDescription>View and manage your recent tickets.</CardDescription>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[75dvh] pr-4">
          <div className="space-y-4">
    
            {tickets.map((ticket) => (
            <TicketCard
                key={ticket.id}
                ticket={ticket}
                medarbejdere={medarbejdere}
                fetchTickets={fetchTickets}
                userMetadata={userMetadata} // Add this line
            />
            ))}
          </div>
        </ScrollArea>
      </CardContent>
    </Card> */}

<Card>
      <CardHeader>
        <div className="flex items-start justify-between">
          <div>
            <CardTitle>{ticket.TicketNavn}</CardTitle>
            <CardDescription>
              Created for: {ticket.Navn}
            </CardDescription>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Badge
                  variant="secondary"
                  className={`mt-2 ${
                    priority.color === 'red' ? 'bg-red-500' :
                    priority.color === 'orange' ? 'bg-orange-500' :
                    priority.color === 'yellow' ? 'bg-yellow-500' :
                    priority.color === 'green' ? 'bg-green-500' :
                    'bg-gray-500'
                  } text-white`}
                >
                  Priority: {priority.label}
                </Badge>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start">
                {[1, 2, 3, 4].map((priorityValue) => {
                  const option = getPriorityDetails(priorityValue)
                  return (
                    <DropdownMenuItem
                      key={priorityValue}
                      onClick={() => handlePriorityChange(priorityValue)}
                      className={`text-${option.color}-500 hover:bg-${option.hoverColor}`}
                    >
                      {option.label}
                    </DropdownMenuItem>
                  )
                })}
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
          <div className="flex items-center gap-2">
            {ticket.Done && (
              <Badge variant="secondary" className="bg-green-500 text-white">
                <CheckCircle2 className="w-4 h-4 mr-1" />
                Completed
              </Badge>
            )}
            {ticket.Ongoing && (
              <Badge variant="secondary" className="bg-yellow-500 text-white">
                <Clock className="w-4 h-4 mr-1" />
                In Progress
              </Badge>
            )}
            {!ticket.Done && !ticket.Ongoing && (
              <Badge variant="secondary">
                <XCircle className="w-4 h-4 mr-1" />
                Open
              </Badge>
            )}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="icon">
                  <MoreVertical className="h-4 w-4" />
                  <span className="sr-only">Open menu</span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem onClick={() => handleStatusChange('open')}>
                  Mark as Open
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => handleStatusChange('ongoing')}>
                  Mark as In Progress
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => handleStatusChange('done')}>
                  Mark as Completed
                </DropdownMenuItem>
                {ticket.Done && (
                  <DropdownMenuItem onClick={handleDeleteTicket}>
                    <Trash2 className="w-4 h-4 mr-2" />
                    Delete Ticket
                  </DropdownMenuItem>
                )}
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <p className="text-sm">{ticket.Beskrivelse}</p>
        <p className="text-xs mt-2">Device/Browser: {ticket.EnhedsOplysning}</p>
        {ticket.Fejlkode && <p className="text-xs">Error Code: {ticket.Fejlkode}</p>}
        <div className="mt-4">
          <Label htmlFor={`worker-${ticket.id}`}>Assigned To</Label>
          <Select
            value={ticket.MedarbejderId || ""}
            onValueChange={(value) => handleAssignWorker(value)}
          >
            <SelectTrigger id={`worker-${ticket.id}`}>
              <SelectValue placeholder="Select a worker" />
            </SelectTrigger>
            <SelectContent>
              {medarbejdere.map((worker) => (
                <SelectItem key={worker.id} value={worker.id}>
                  {worker.Fornavn} {worker.Efternavn}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="mt-4 space-y-4">
          <div className="flex items-center gap-2">
            <MessageSquare className="h-4 w-4" />
            <h3 className="text-sm font-semibold">Notes</h3>
          </div>
          
          <div className="space-y-2">
            {ticketNotes.map(note => (
              <div key={note.id} className="bg-muted p-3 rounded-lg space-y-1">
                <div className="flex justify-between items-start">
                  <p className="text-sm">{note.Note}</p>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleDeleteNote(note.id)}
                    className="h-6 w-6"
                  >
                    <Trash2 className="h-4 w-4" />
                    <span className="sr-only">Delete note</span>
                  </Button>
                </div>
                <div className="flex justify-between items-center text-xs text-muted-foreground">
                  <span>{new Date(note.created_at).toLocaleString()}</span>
                  <p>{note.Medarbejdere.Fornavn} {note.Medarbejdere.Efternavn}</p>
                </div>
              </div>
            ))}
          </div>

          <div className="flex flex-col gap-2">
            <Textarea
              placeholder="Add a note..."
              value={newNote}
              onChange={(e) => setNewNote(e.target.value)}
              className="min-h-[80px]"
            />
            <Button 
              onClick={handleAddNote}
              className="shrink-0"
            >
              Add Note
            </Button>
          </div>
        </div>
      </CardContent>
      <CardFooter>
        <p className="text-xs text-muted-foreground">
          Created at: {new Date(ticket.created_at).toLocaleString()}
        </p>
      </CardFooter>
    </Card>